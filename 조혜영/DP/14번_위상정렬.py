
#¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
#                         14번. 위상정렬 (그래프)
#     위상정렬 : 일의 선후관계를 유지하면서 전체 일의 순서를 짜는 것 (그래프를 이용한다)
#               위상 정렬에서는 진입 차수가 중요함 진입 차수란 내 앞전에 선으로 처리해야할 일의 개수 
#…………………………………………………………………………………………………………………………………………………………………………………………

n, m=map(int, input().split())
graph=[[0]*(n+1) for _ in range(n+1)]
degree=[0]*(n+1)
dQ=deque()

# 일의 순서 입력받기 
for i in range(m):
    # a일을 하고나서 b일을 해야한다.
    a, b=map(int, input().split()) 
    graph[a][b]=1 # 그래프를 이용 : 서로 인접 순서이므로 1로 기록
    degree[b]+=1 # b의 진입차수+=1 (b가 하기전에 )
    
for i in range(1, n+1):
    '''
    진입차수가 0인 경우 자신이 먼저일하는 것이라 다 dQ에 담아둔다.
    이때 정답은 여러가지 가능! 
    -> 진입차수 = 0인 원소가 여러개인 경우 그 중 어떤 누구를 먼저 처리하냐에 따라 순서가 바뀜
    '''
    if degree[i]==0:
        dQ.append(i)  


# 진입 차수가 0인 작업(원소)는 dQ로 들어가고 
# 작업이 완료됐다는 의미로 dQ에서 나오면서 자신의 다음 순서인 원소의 진입차수를 -=1로 해줘야됨 
while dQ:
    x=dQ.popleft()   # 작업 완료로 나가고 
    print(x, end=' ')
    for i in range(1, n+1): # 자신과 연결된 다음 작업의 진입차수를 낮춰준다
        if graph[x][i]==1:
            degree[i]-=1
            
            # 진입차수가 0이되면 더이상 앞에 먼저해야할 일이 없음 해당 
            if degree[i]==0:
                dQ.append(i)
