#¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
#                  1번.  가장 큰 수 (스택)
#
#   dy[j]: 가방이 j무게일때 가질 수 있는 보석의 최대 가치
#…………………………………………………………………………………………………………………………………………………………………………………………

num, m=map(int, input().split())
num=list(map(int, str(num)))
stack=[]
for x in num:
    while stack and m>0 and stack[-1]<x:
        stack.pop()
        m-=1
    stack.append(x)
if m!=0:
    stack=stack[:-m]
res=''.join(map(str, stack))
print(res)




#¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
#                  2번.  쇠막대기 (스택)
#
#   '('이 stack에 들어오는만큼 쇠막대기 개수 생성  '('가 stack에 2개면 이미 2줄의 쇠막대기가 생긴 것 
#   ')'는 쇠막대기를 절단하는 것
#…………………………………………………………………………………………………………………………………………………………………………………………

s=input()
stack=[]
cnt=0

for i in range(len(s)): # 괄호 표현 탐색하기 
    # 열린 괄호면 그냥 stack에 쌓아두기
    if s[i]=='(':
        stack.append(s[i])
    
    
    # 닫힌 괄호이면 앞에 있는 괄호가 '('이면 레이저!     
    else: 
        stack.pop()  
        # 앞부분 확인하기 '('인지 ')'인지  
        if s[i-1]=='(':  # 레이저임 - 쇠막대기 하나만 자르는것이아니라 기존의 stack안에 있는 '('이 만들어 놓은 쇠막대기의 개수만큼 끝부분 한번 cutting 
            cnt+=len(stack)
        else: # ')'의 경우면 아직 레이저는 아니므로 
            cnt+=1
print(cnt)






#¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨¨
#                  3번.  후위 표기식 만들기 (스택)
#
#   dy[j]: 가방이 j무게일때 가질 수 있는 보석의 최대 가치
#…………………………………………………………………………………………………………………………………………………………………………………………

import sys
sys.stdin=open("input.txt", "r")
a=input()
stack=[]
res=''
for x in a:
    if x.isdecimal():
        res+=x
    else:
        if x=='(':
            stack.append(x)
        elif x=='*' or x=='/':
            while stack and (stack[-1]=='*' or stack[-1]=='/'):
                res+=stack.pop()
            stack.append(x)
        elif x=='+' or x=='-':
            while stack and stack[-1]!='(':
                res+=stack.pop()
            stack.append(x)
        elif x==')':
            while stack and stack[-1]!='(':
                res+=stack.pop()
            stack.pop()
while stack:
    res+=stack.pop()
print(res)






